#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <string>
#include <algorithm>
#include <queue>
#include <vector>
using namespace std;

int arr[10][10];
bool row_check[10][10];
bool col_check[10][10];
bool sq_check[10][10];
bool flag = false;
bool check(int x, int y, int num)
{
	int val1 = (x - 1) / 3;
	int val2 = (y - 1) / 3;
	int index = val1 * 3 + val2 + 1;

	if (row_check[x][num] == true)
	{
		return false;
	}
	if (col_check[y][num] == true)
	{
		return false;
	}
	if (sq_check[index][num] == true)
	{
		return false;
	}
	return true;
}
bool isFinish()
{
	for (int i = 1; i <= 9; i++)
	{
		for (int j = 1; j <= 9; j++)
		{
			if (arr[i][j] == 0)
			{
				return false;
			}
		}
	}
	return true;
}
void DFS(int x, int y)
{
	if (isFinish())
	{
		for (int i = 1; i <= 9; i++)
		{
			for (int j = 1; j <= 9; j++)
			{
				printf("%d ", arr[i][j]);
			}
			printf("\n");
		}
		flag = true;
		return;
	}
	for (int i = 1; i <= 9; i++)
	{
		for (int j = 1; j <= 9; j++)
		{
			if (arr[i][j] == 0)
			{
				int val1 = (i - 1) / 3;
				int val2 = (j - 1) / 3;
				int index = val1 * 3 + val2 + 1;
				bool temp = false;
				for (int k = 1; k <= 9; k++)
				{
					if (flag == true)
					{
						return;
					}
					//넣을수있는경우
					if (check(i, j, k))
					{
						temp = true;
						row_check[i][k] = true;
						col_check[j][k] = true;
						sq_check[index][k] = true;
						arr[i][j] = k;
						DFS(i, j);
						row_check[i][k] = false;
						col_check[j][k] = false;
						sq_check[index][k] = false;
						arr[i][j] = 0;
						temp = false;
					}
				}
				if (temp == false)
				{
					return;
				}
			}
		}
	}
}
int main()
{
	for (int i = 1; i <= 9; i++)
	{
		for (int j = 1; j <= 9; j++)
		{
			cin >> arr[i][j];
			if (arr[i][j] != 0)
			{
				row_check[i][arr[i][j]] = true;
				col_check[j][arr[i][j]] = true;
				int val1 = (i - 1) / 3;
				int val2 = (j - 1) / 3;
				int index = val1 * 3 + val2 + 1;
				sq_check[index][arr[i][j]] = true;
			}
		}
	}
	DFS(1, 1);
	return 0;
}